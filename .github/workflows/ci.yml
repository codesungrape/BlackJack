#This workflow will:

# Check out your code
# Set up Node.js with npm caching
# Install dependencies
# Run linting
# Run tests with coverage checks
# Upload coverage reports (even if tests fail)
# Build the project

name: CI

on:
  push:
    branches:
      - main
      - develop
      - "feature/**"
  pull_request:
    branches:
      - main

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Explicit cache configuration
      - name: Cache node_modules
        id: cache-npm
        uses: actions/cache@v4
        env:
          cache-name: cache-node-modules # Added for clarity
        with:
          path: |
            ~/.npm
          key: node-cache-${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20.x"

      - name: Install dependencies
        run: npm ci
        timeout-minutes: 10

      # Add ESLint setup step
      - name: Setup ESLint
        run: |
          if [ ! -f .eslintrc.json ]; then
            echo '{"extends": "next/core-web-vitals"}' > .eslintrc.json
          fi

      - name: Run linting
        run: npm run lint
        timeout-minutes: 5

      - name: Run tests with coverage
        run: |
          npm test -- --coverage --coverageThreshold='{"global":{"branches":80,"functions":80,"lines":80,"statements":80}}'
        env:
          NODE_ENV: test
        timeout-minutes: 15

      - name: Upload test coverage
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage
          path: |
            coverage/
            src/components/
          retention-days: 7

      - name: Build project
        run: npm run build
        timeout-minutes: 15
        env:
          NODE_ENV: production
