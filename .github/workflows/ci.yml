name: CI

on:
  push:
    branches:
      - main
      - develop
      - "feature/**"
  pull_request:
    branches:
      - main

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      # Get code fromt the repo
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20.x"
          cache: "npm" # This enables built-in npm caching, which replaces all below. If fine-grained control is needed over caching behavior is needed, use below.
      # - name: Cache dependencies
      #   uses: actions/cache@v4
      #   with:
      #     path: ~/.npm
      #     #creates a unique key for the cache
      #     key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
      # fallback jeys if exact match isn't found
      #     restore-keys: |
      #       ${{ runner.os }}-node-

      - name: Install dependencies
        run: npm ci
        timeout-minutes: 10

      - name: Run linting
        run: npm run lint
        timeout-munites: 5

      - name: Run tests
        run: npm test
        env:
          NODE_ENV: test
        timeout-minutes: 15

      - name: Build project
        run: npm run build
        timeout-minutes: 15
        env:
          NODE_ENV: production

      - name: Upload test coverage
        if: always() # Runs even if previous steps fail
        uses: actions/upload-artiface@v4
        with:
          name: coverage
          path: coverage/ # Where test coverage reports are saved
          retention-days: 7

      - name: Cleanup npm cache
        if: always()
        run: |
          npm cache verify
          npm cache clean --force
        continue-on-error: true # Won't fail the workflow if cleanup fails
